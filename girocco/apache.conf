ServerName repo.unosoft.hu

# This is example configuration of a virtualhost running Girocco, as set up
# at repo.unosoft.hu; unfortunately, completely independent from Girocco::Config.
# It is not essential for Girocco to use a special virtualhost, however.
<VirtualHost repo.unosoft.hu:80>

        ServerName repo.unosoft.hu
        ServerAlias www.repo.unosoft.hu localhost
        ServerAdmin admin@repo.unosoft.hu

        ErrorLog /var/log/apache2/repo-error.log
        CustomLog /var/log/apache2/repo-access.log combined

        AddHandler cgi-script .cgi

        DocumentRoot /home/repo/WWW
        <Directory /home/repo/WWW>
                # Add MultiViews only if pages are truly
                # offered in more than a single language
                Options Indexes FollowSymLinks ExecCGI
                AllowOverride All
                #Order allow,deny
                #Allow from all
                Require all granted
                DirectoryIndex gitweb.cgi
                Satisfy all
        </Directory>

        ScriptAlias /w /home/repo/WWW/gitweb.cgi
        ScriptAlias /h /home/repo/WWW/html.cgi

        <Directory /srv/git>
                Options FollowSymLinks
                AllowOverride None
                #Order allow,deny
                #Allow from all
                Require all granted
                Satisfy all

                <IfModule rewrite_module>
                        # Everything fetched over the non-smart git http
                        # protocol should be an existing file.  If the request
                        # is not for an existing file, just send back an error
                        # message without emitting anything into the error log.
                        RewriteEngine On
                        RewriteCond %{REQUEST_FILENAME} !-f
                        RewriteRule .* - [R=404,L]
                </IfModule>
        </Directory>

        <Directory /home/repo/repomgr/bin>
                Options None
                AllowOverride None
                #Order deny,allow
                #Deny from all
                Require all denied
                <Files git-http-backend-verify>
                        Allow from all
                </Files>
                Satisfy all
        </Directory>

        SetEnv GIT_PROJECT_ROOT /srv/git
        SetEnv GIT_HTTP_EXPORT_ALL 1

        # By default non-smart HTTP fetch access will be allowed, however
        # by defining SmartHTTPOnly (or changing the sense of the IfDefine tests)
        # non-smart HTTP requests can be denied directly by the web server

        <IfDefine !SmartHTTPOnly>
        # These accelerate non-smart HTTP access to loose objects and packs
        AliasMatch ^/r/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$           /srv/git/$1
        AliasMatch ^/r/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$  /srv/git/$1
        </IfDefine>

        <IfDefine SmartHTTPOnly>
        # Disable non-smart HTTP access
        RewriteEngine On
        RewriteCond %{REQUEST_METHOD} !^POST$
        RewriteRule ^/r/.*(?<!/info/refs)$ - [F]
        RewriteCond %{QUERY_STRING} !(^|&)service=git-(upload|receive)-pack(&|$)
        RewriteRule ^/r/.*/info/refs$ - [F]
        </IfDefine>

        # SetEnv GIT_HTTP_BACKEND_BIN to override Config.pm $git_http_backend_bin
        ScriptAlias /r/ /home/repo/repomgr/bin/git-http-backend-verify/

</VirtualHost>


# This comments out the following so this file can be used as-is
<IfDefine DummyThatIsNotDefined>


# This is example configuration of an https virtualhost running Girocco, as set
# up at repo.unosoft.hu; unfortunately, completely independent from Girocco::Config.
# It is not essential for Girocco to use a special virtualhost, however.
# The Config.pm $httpspushurl variable needs to be defined to properly enable
# https pushing.
<VirtualHost *:443>

        # These certificate files will all be automatically generated, but the
        # paths here may need to be corrected to match the paths
        # (especially $certsdir) from Config.pm

        SSLCertificateFile /home/repo/certs/girocco_www_crt.pem
        SSLCertificateKeyFile /home/repo/certs/girocco_www_key.pem
        SSLCertificateChainFile /home/repo/certs/girocco_www_chain.pem
        # when using a paid www server cert, only the above three lines should
        # be changed.  Changing any of the below two lines (other than updating
        # the paths to match $certsdir) will likely break https client auth
        SSLCACertificateFile /home/repo/certs/girocco_root_crt.pem
        SSLCADNRequestFile /home/repo/certs/girocco_client_crt.pem

        SSLVerifyDepth 3
        SSLOptions +FakeBasicAuth +StrictRequire
        SSLEngine on
        <Location />
                SSLRequireSSL
        </Location>

        # This configuration allows fetching over https without a certificate
        # while always requiring a certificate for pushing over https
        RewriteEngine On
        SSLVerifyClient optional
        RewriteCond %{QUERY_STRING} (^|&)service=git-receive-pack(&|$)
        RewriteRule ^/r/.*/info/refs$ - [env=client_auth_required:1]
        RewriteRule ^/r/.*/git-receive-pack$ - [env=client_auth_required:1]
        RewriteCond %{ENV:client_auth_required} 1
        RewriteCond %{SSL:SSL_CLIENT_VERIFY} !^SUCCESS$
        RewriteRule .* %{REQUEST_URI} [R=401]
        <LocationMatch ^/r/>
                #Order deny,allow
                #Deny from env=client_auth_required
                Require env client_auth_required
                SSLOptions +FakeBasicAuth
                AuthName "Git Client Authentication"
                AuthType Basic
                AuthBasicProvider anon
                Anonymous *
                Require valid-user
                Satisfy any
        </LocationMatch>

        # *** IMPORTANT ***
        #
        # ALL the entire contents from the <VirtualHost *:80> section at
        # the top of this file must be copied here.
        #
        # To avoid this duplication, the contents of the <VirtualHost *:80>
        # section above can be moved to a separate file and then included
        # both here and in the <VirtualHost *:80> section using an Include
        # directive.  Be careful not to place the new include file in one of the
        # directories the standard apache configuration blindly includes all
        # files from.

</VirtualHost>


# End commenting
</IfDefine>
